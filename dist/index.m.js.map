{"version":3,"file":"index.m.js","sources":["../src/index.ts"],"sourcesContent":["interface Bin {\n    path_name: string,\n\n}\n\nexport class Tubeify {\n    private tile: number; // # of tiles in output. One tile corresponds to one bin if tiles === -1.\n    private max_bin: number; // # of bins in input.\n    private bin_length: number; // Nucleotide length of each bins.\n    tiles_range: number[]; // e.g. [0, 5, 10, 15, 20] according to max_bin and tile.\n\n    constructor(tile: number, bin_length: number, max_bin?: number) {\n        this.tile = tile;\n        this.tiles_range = tile === -1 ?\n            Array.from(new Array(this.max_bin)).map((v, i) => i) :\n            Array.from(new Array(tile)).map((v, i) => Math.round(max_bin * i / tile));\n        this.bin_length = bin_length || 0;\n        this.max_bin = Number.isNaN(max_bin) ? -1 : max_bin;\n    }\n\n    tiles(bin: number) {\n        // Find the tile ID by binary search on tiled_range.\n        // let flag = false; // It should be replaced with a binary search at least.\n        let tile_index = this.tiles_range.length;\n        this.tiles_range.forEach((range, i) => {\n            if (range <= bin) {\n                tile_index = i;\n                return\n            }\n        });\n        return tile_index\n    }\n\n    tubeify(bin_json: any) {\n        let reads = [];\n        let paths = {};\n        let path_starts = {};\n        let max_bin_id = 0;\n\n        bin_json.forEach(bin => {\n            if (paths[bin.name] === undefined) {\n                paths[bin.name] = {};\n            }\n            paths[bin.name][bin.bin_id] = bin;\n            if (bin.begins[0][0] === -1) {\n                path_starts[bin.name] = bin.bin_id;\n            }\n            if (max_bin_id < bin.bin_id) {\n                max_bin_id = bin.bin_id; \n            }\n        });\n\n        if (this.max_bin === -1) {\n            this.max_bin = max_bin_id;\n        }\n        /*\n        Object.keys(paths).forEach(path_name => {\n            let path_hash = paths[path_name];\n            let current_tile = -1;\n            let sequential_id = 0;\n            let tmp = [];\n            let current_pos = path_starts[path_name];\n\n            while(current_pos !== -1) {\n                let bin = path_hash[current_pos];\n                if (current_tile !== tiles(bin.bin)) {\n                    let sequence_new = tmp.map(a => a.);\n                    \n                    // Output as a single bin.\n                    let firstNodeOffset = tmp[0].bin - this.tiles_range[current_tile]; \n                    if (firstNodeOffset > 0) {\n                        sequence_new.push({type: \"link\", pos: firstNodeOffset, seq: \"translocation\", query: bin.bin });\n                    }\n                    if (bin.bin - 1 !== tmp[-1].bin ) {\n                        sequence_new.push({type: \"link\", pos:(tmp.length) * this.bin_length, seq: \"translocation\", query: bin.bin });\n                    }\n\n                    reads.push({\n                        firstNodeOffset: firstNodeOffset * this.bin_length,\n                        finalNodeCoverLength: (tmp.length) * this.bin_length,\n                        mapping_quality: 60,\n                        is_secondary: false,\n                        Sequence: tmp.map(item => String(item.bin_id)),\n                        Sequence_new: sequence_new,\n                        type: \"read\",\n                        name: bin.path_name,\n                        id: sequential_id\n                   });\n\n                    sequential_id += 1;\n                    current_tile = tiles(bin.bin);\n\n                    tmp = [bin];\n                } else {\n                    tmp.push(bin);\n                }\n                bin.\n                current_pos = bin.next_bin[0];\n            }\n            // Clean up bins\n\n            reads.push({\n                firstNodeOffset: firstNodeOffset * this.bin_length,\n                finalNodeCoverLength: (tmp.length) * this.bin_length,\n                mapping_quality: 60,\n                is_secondary: false,\n                Sequence: tmp.map(item => item.bin),\n                Sequence_new: sequence_new,\n                type: \"read\",\n                name: bin.path_name,\n                id: sequential_id\n            });\n        })\n        */\n\n\n        let previous_id = -1;\n        let previous_bin = -1;\n        bin_json.forEach(bin => {\n            bin.begins.forEach((begin, index) => {\n                if (previous_bin !== bin.path_name) {\n                    previous_id = 0;\n                    previous_bin = bin.path_name;\n                } else {\n                    previous_id += 1;\n                }\n                let sequence_new = [{\n                    nodeName: String(bin.bin_id),\n                    mismatches: []\n                }];\n                // console.log(bin)\n                if (bin.begins[index][0] !== bin.bin_id - 1 && bin.begins[index][0] !== -1) {\n                    sequence_new[0].mismatches.push({\n                        type: \"link\", pos: 0, seq: \"L\", query: bin.begins[index][0] + 1 // Dirty fix\n                    });\n                }\n                if (bin.ends[index][0] !== bin.bin_id + 1 && bin.ends[index][0] !== -1) {\n                    sequence_new[0].mismatches.push({\n                        type: \"link\", pos: this.bin_length, seq: \"L\", query: bin.ends[index][0] + 1 // Dirty fix\n                    });\n                }\n                reads.push({\n                    firstNodeOffset: 0,\n                    finalNodeCoverLength: this.bin_length,\n                    mapping_quality: 60,\n                    is_secondary: false,\n                    sequence: [String(bin.bin_id)],\n                    sequenceNew: sequence_new,\n                    type: \"read\",\n                    name: bin.path_name,\n                    id: previous_id\n                });\n            })\n        })\n\n        let tubemap_json = {};\n        const nodes = Array.from(new Array(this.max_bin)).map((v, i) => { return { name: String(i + 1), sequenceLength: this.bin_length } }\n        );\n        tubemap_json[\"nodes\"] = nodes;\n        tubemap_json[\"tracks\"] = [{ id: 0, name: \"REF\", sequence: nodes.map(node => node.name) }];\n        tubemap_json[\"reads\"] = reads;\n\n        return tubemap_json\n    }\n\n}\n"],"names":["Tubeify","constructor","tile","bin_length","max_bin","tiles_range","Array","from","this","map","v","i","Math","round","Number","isNaN","tiles","bin","tile_index","length","forEach","range","tubeify","bin_json","reads","paths","max_bin_id","undefined","name","bin_id","previous_id","previous_bin","begins","begin","index","path_name","sequence_new","nodeName","String","mismatches","push","query","ends","pos","finalNodeCoverLength","tubemap_json","nodes","sequenceLength","sequence","node"],"mappings":"IAKaA,EAMTC,SAAYC,EAAcC,EAAoBC,QACrCF,KAAOA,OACPG,aAAwB,IAAVH,EACfI,MAAMC,KAAK,IAAID,MAAME,KAAKJ,UAAUK,aAAKC,EAAGC,UAAMA,IAClDL,MAAMC,KAAK,IAAID,MAAMJ,IAAOO,aAAKC,EAAGC,UAAMC,KAAKC,MAAMT,EAAUO,EAAIT,UAClEC,WAAaA,GAAc,OAC3BC,QAAUU,OAAOC,MAAMX,IAAY,EAAIA,GAGhDY,YAAAA,eAAMC,OAGEC,EAAaV,KAAKH,YAAYc,mBAC7Bd,YAAYe,iBAASC,EAAOV,GACzBU,GAASJ,MACIN,KAIdO,GAGXI,YAAAA,iBAAQC,cACAC,EAAQ,GACRC,EAAQ,GAERC,EAAa,EAEjBH,EAASH,iBAAQH,QACWU,IAApBF,EAAMR,EAAIW,UACJX,EAAIW,MAAQ,IAEtBH,EAAMR,EAAIW,MAAMX,EAAIY,QAAUZ,EAI1BS,EAAaT,EAAIY,SACjBH,EAAaT,EAAIY,WAIH,IAAlBrB,KAAKJ,eACAA,QAAUsB,OA+DfI,GAAe,EACfC,GAAgB,EACpBR,EAASH,iBAAQH,KACTe,OAAOZ,iBAASa,EAAOC,GACnBH,IAAiBd,EAAIkB,aACP,EACdJ,EAAed,EAAIkB,cAEJ,MAEfC,EAAe,CAAC,CAChBC,SAAUC,OAAOrB,EAAIY,mBACT,KAGZZ,EAAIe,OAAOE,GAAO,KAAOjB,EAAIY,OAAS,IAA+B,IAA1BZ,EAAIe,OAAOE,GAAO,MAChD,GAAGK,WAAWC,KAAK,MACtB,WAAa,MAAQ,IAAKC,MAAOxB,EAAIe,OAAOE,GAAO,GAAK,IAGlEjB,EAAIyB,KAAKR,GAAO,KAAOjB,EAAIY,OAAS,IAA6B,IAAxBZ,EAAIyB,KAAKR,GAAO,MAC5C,GAAGK,WAAWC,KAAK,MACtB,OAAQG,IAAKnC,EAAKL,eAAiB,IAAKsC,MAAOxB,EAAIyB,KAAKR,GAAO,GAAK,MAG5EM,KAAK,iBACU,EACjBI,qBAAsBpC,EAAKL,2BACV,iBACH,WACJ,CAACmC,OAAOrB,EAAIY,qBACTO,OACP,OACNR,KAAMX,EAAIkB,aACNL,YAKZe,EAAe,GACbC,EAAQxC,MAAMC,KAAK,IAAID,MAAME,KAAKJ,UAAUK,aAAKC,EAAGC,SAAe,CAAEiB,KAAMU,OAAO3B,EAAI,GAAIoC,eAAgBvC,EAAKL,qBAErH0C,EAAY,MAAYC,EACxBD,EAAY,OAAa,CAAC,IAAM,OAAS,MAAOG,SAAUF,EAAMrC,aAAIwC,UAAQA,EAAKrB,SACjFiB,EAAY,MAAYrB,EAEjBqB"}